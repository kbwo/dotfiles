extends javascript

snippet s_base_react_fc "react_functionanl_component_basis"
import React from 'react';

type $1 = {
}

const $2: React.FC<$1> = () => {
  return (
	  <>
			$3
		</>
	);
};

export default $2;
endsnippet

snippet s_import_from "import $1 from $2;"
import $1 from $2;
endsnippet

snippet s_import_react "import React from 'react';"
import React from 'react';
endsnippet

snippet s_fragment "<></>"
<>
</>
endsnippet

snippet s_usestate "const [$1, set$2] = useState($3);"
const [$1, set$2] = useState($3);
endsnippet

snippet s_usecallback "useCallback(() => {..."
useCallback(() => {
	$1
}, []);
endsnippet

snippet s_usememo "useMemo(() => {..."
useMemo(() => {
	$1
}, []);
endsnippet

snippet s_useeffect "useEffect(() => {..."
useEffect(() => {
	$1
}, []);
endsnippet

snippet s_uselayouteffect "useLayoutEffect(() => {..."
useLayoutEffect(() => {
	$1
}, []);
endsnippet

snippet s_reactnative_style "const $1 = StyleSheet.create..."
const $1 = StyleSheet.create({
	$2
});
endsnippet

snippet s_flatlist "<FlatList..."
<FlatList
	data={$1}
	keyExtractor={(_, index) => index.toString()}
	renderItem={({item}) => (
	)}
/>
endsnippet

snippet s_remix_meta "export const meta: MetaFunction = () => ({..."
export const meta: MetaFunction = () => ({
});
endsnippet

snippet s_remix_links "export const links: LinksFunction = () => {..."
export const links: LinksFunction = () => {
  return [{ rel: 'stylesheet', href: $1 }];
};
endsnippet

snippet s_remix_action "export const action: ActionFunction = async ({ request }) => {..."
export const action: ActionFunction = async ({ request }) => {
};
endsnippet

snippet react_query_usequery_base "import { useQuery, UseQueryOptions } from '@tanstack/react-query';..."
import { useQuery, UseQueryOptions } from '@tanstack/react-query';

type Request = {
};

type Response = {
};

const fetchiFn = async (
  req: Request
): Promise<Response> => {
  const response = await axios.post(url, req);
  return response.data;
};

export const useFindByToken = (
  token: string,
  opt: UseQueryOptions<Response, AxiosError>
) => {
  return useQuery({
    queryKey: [token],
    queryFn: () => fetchiFn({ token }),
    ...opt,
  });
};
endsnippet

snippet base_react_query_usemutation "import type { UseMutationOptions } from '@tanstack/react-query';"
import type { UseMutationOptions } from '@tanstack/react-query';
import { useMutation } from '@tanstack/react-query';
import { axios } from '~/root';

type Request = {
};

type Response = {
};

const login = async (req: Request): Promise<Response> => {
  const response = await axios.post(url, req);
  return response.data;
};

export const useLogin = (
  opt: UseMutationOptions<Response, AxiosError, Request, unknown>
) => {
  return useMutation<Response, AxiosError, Request, unknown>({
    mutationFn: login,
    ...opt,
  });
};
endsnippet
