snippet d_fn "fn name(?) -> ? {}"
fn ${1:function_name}($2)${3/..*/ -> /}$3 {
	${VISUAL}$0
}
endsnippet

snippet d_pubfn "pub fn name(?) -> ? {}"
pub fn ${1:function_name}($2)${3/..*/ -> /}$3 {
	${VISUAL}$0
}
endsnippet

snippet d_asyncfn "async fn name(?) -> ? {}"
async fn ${1:function_name}($2)${3/..*/ -> /}$3 {
	${VISUAL}$0
}
endsnippet

snippet d_pubasyncfn "pub async fn name(?) -> ? {}"
pub async fn ${1:function_name}($2)${3/..*/ -> /}$3 {
	${VISUAL}$0
}
endsnippet

snippet u_print "print!(..)"
print!("$1"${2/..*/, /}$2);
endsnippet

snippet u_println "println!(..)"
println!("$1"${2/..*/, /}$2);
endsnippet

snippet u_format "format!(..)"
format!("$1"${2/..*/, /}$2);
endsnippet

snippet u_dbg! "dbg!(..)"
dbg!("$1");
endsnippet

snippet d_impl "Struct/Trait implementation"
impl$4 ${1:Type/Trait}${2: for ${3:Type}}${4:<${5:T}>} {
	${0}
}
endsnippet

snippet u_assert_eq "assert"
assert_eq!(${1:Target}, ${2: Value});
endsnippet

snippet u_match "match ... (match)"
match ${1:expression} {
	${2:pattern} => ${3:expression},
	${4:pattern} => ${5:expression},
	${VISUAL}${6:${VISUAL/(.*)/_/}} => ${0:expression},
}
endsnippet

snippet u_while "while ... (while)"
while ${1:condition} {
	${0}
}
endsnippet

snippet d_modtest "mod tests {..."
#[cfg(test)]
mod tests {

    #[test]
    fn $1() {
    }

}
endsnippet

snippet d_args "let args: Vec<String> = std::env::args().collect();..."
let args: Vec<String> = std::env::args().collect();
if args.len() >= $1 {
		panic!("unexpected number of arguments");
}
endsnippet

snippet u_read_file_to_string "read file to string buffer"
let mut buf = String::new();
${1:AsRef<Path>}.as_ref().read_to_string(buf);
endsnippet

snippet d_filepath_type "AsRef<Path>>"
AsRef<Path>
endsnippet

snippet u_file_metadata_stat "fs::metadata(filename)"
fs::metadata("$1")
endsnippet

snippet d_io_result "io::Result" 
io::Result<$1, $2>
endsnippet

snippet u_mkdir "fs::create_dir" 
fs::create_dir("$1")
endsnippet

snippet u_thread_spawn "thread::spawn(move || {..."
thread::spawn(move || {
	$1
});
endsnippet

snippet u_actix_server_init "HttpServer::new(move || {"
HttpServer::new(move || {
	App::new()
		.wrap(${1:middleware})
		.app_data(${2:Data})
		.configure(|cfg| ${3:config_fn})
})
.bind(${4:net::ToSocketAddrs})?
.run()
.await?;
endsnippet

snippet d_actix_route_config_init "pub fn config(cfg: &mut web::ServiceConfig) {..."
pub fn config(cfg: &mut web::ServiceConfig) {
  cfg
    .route("/", web::get().to(${1:fn}))

  cfg.service(
    web::scope("")
      .wrap(${2:middleware})
      .guard(${3:guard})
      .route("", web::post().to())
  );
}
endsnippet

snippet d_environment_variable "let log_description = std::env::var..."
let $1 = std::env::var("${2:env_name}").unwrap_or_else(|_| "$3".into());
endsnippet

snippet d_tracing_subscriber_init "let layer = tracing_subscriber::fmt::layer()..." 
let layer = tracing_subscriber::fmt::layer().with_filter(targets.clone());

let subscriber = Registry::default()
	.with(layer)
	.with(ErrorLayer::default());
endsnippet

