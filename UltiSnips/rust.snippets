snippet d_fn "fn name(?) -> ? {}"
fn ${1:function_name}($2)${3/..*/ -> /}$3 {
	${VISUAL}$0
}
endsnippet

snippet d_pubfn "pub fn name(?) -> ? {}"
pub fn ${1:function_name}($2)${3/..*/ -> /}$3 {
	${VISUAL}$0
}
endsnippet

snippet d_asyncfn "async fn name(?) -> ? {}"
async fn ${1:function_name}($2)${3/..*/ -> /}$3 {
	${VISUAL}$0
}
endsnippet

snippet d_pubasyncfn "pub async fn name(?) -> ? {}"
pub async fn ${1:function_name}($2)${3/..*/ -> /}$3 {
	${VISUAL}$0
}
endsnippet

snippet u_print "print!(..)"
print!("$1"${2/..*/, /}$2);
endsnippet

snippet u_println "println!(..)"
println!("$1"${2/..*/, /}$2);
endsnippet

snippet u_format "format!(..)"
format!("$1"${2/..*/, /}$2);
endsnippet

snippet u_dbg! "dbg!(..)"
dbg!("$1");
endsnippet

snippet d_impl "Struct/Trait implementation"
impl$4 ${1:Type/Trait}${2: for ${3:Type}}${4:<${5:T}>} {
	${0}
}
endsnippet

snippet u_assert_eq "assert"
assert_eq!(${1:Target}, ${2: Value});
endsnippet

snippet u_match "match ... (match)"
match ${1:expression} {
	${2:pattern} => ${3:expression},
	${4:pattern} => ${5:expression},
	${VISUAL}${6:${VISUAL/(.*)/_/}} => ${0:expression},
}
endsnippet

snippet u_while "while ... (while)"
while ${1:condition} {
	${0}
}
endsnippet

snippet d_modtest "mod tests {..."
#[cfg(test)]
mod tests {

    #[test]
    fn $1() {
		}

}
endsnippet

